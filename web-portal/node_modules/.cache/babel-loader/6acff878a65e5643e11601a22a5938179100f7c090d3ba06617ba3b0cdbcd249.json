{"ast":null,"code":"function checkResponseOk(response) {\n  if (!response.ok) {\n    const message = `An error occurred: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n}\nexport async function getAllRecords(table) {\n  const response = await fetch(`http://localhost:5050/record/table`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table: table\n    })\n  });\n  checkResponseOk(response);\n  let recordsToReturn = await response.json();\n  return recordsToReturn;\n}\nexport async function getSortedRecords(table, field, order) {\n  const response = await fetch(`http://localhost:5050/record/sort`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table: table,\n      field: field,\n      order: order\n    })\n  });\n  checkResponseOk(response);\n  let recordsToReturn = await response.json();\n  return recordsToReturn;\n}\nexport async function searchRecords(searchForm) {\n  let body = {};\n  if (searchForm.table == \"industriesDB\") {\n    body = JSON.stringify({\n      table: searchForm.table,\n      field: \"name\",\n      name: searchForm.name\n    });\n  } else if (searchForm.table == \"iotDB\") {\n    body = JSON.stringify({\n      table: searchForm.table,\n      field: \"DeviceName\",\n      name: searchForm.name\n    });\n  }\n  const response = await fetch(`http://localhost:5050/record/search`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: body\n  });\n  checkResponseOk(response);\n  let recordsToReturn = await response.json();\n  return recordsToReturn;\n}\nexport async function getRecordById(table, id) {\n  const response = await fetch(`http://localhost:5050/record/tableid`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      table: table,\n      id: id\n    })\n  });\n  checkResponseOk(response);\n  let recordsToReturn = await response.json();\n  return recordsToReturn;\n}\nexport async function editRecord(editedRecord) {\n  const response = await fetch(`http://localhost:5050/record/edit`, {\n    method: \"POST\",\n    body: JSON.stringify(editedRecord),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  checkResponseOk(response);\n  let recordsToReturn = await response.json();\n  return recordsToReturn;\n}","map":{"version":3,"names":["checkResponseOk","response","ok","message","statusText","window","alert","getAllRecords","table","fetch","method","headers","body","JSON","stringify","recordsToReturn","json","getSortedRecords","field","order","searchRecords","searchForm","name","getRecordById","id","editRecord","editedRecord"],"sources":["C:/Users/PotiriadisN/code/fullstack_exercise/web-portal/src/api/records.js"],"sourcesContent":["function checkResponseOk(response){\r\n    if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n    }\r\n}\r\n\r\nexport async function getAllRecords(table){\r\n    const response = await fetch(`http://localhost:5050/record/table`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table: table }),\r\n\r\n    });\r\n    checkResponseOk(response);\r\n\r\n    let recordsToReturn = await response.json();\r\n    return recordsToReturn;\r\n\r\n}\r\n\r\nexport async function getSortedRecords(table, field, order){\r\n\r\n    const response = await fetch(`http://localhost:5050/record/sort`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table: table, field: field, order: order }),\r\n\r\n    });\r\n\r\n    checkResponseOk(response);\r\n    let recordsToReturn = await response.json();\r\n    return recordsToReturn;\r\n\r\n}\r\n\r\nexport async function searchRecords(searchForm){\r\n    let body = {}\r\n    if (searchForm.table == \"industriesDB\") {\r\n        body = JSON.stringify({ table: searchForm.table, field: \"name\", name: searchForm.name })\r\n    }\r\n    else if (searchForm.table == \"iotDB\") {\r\n        body = JSON.stringify({ table: searchForm.table, field: \"DeviceName\", name: searchForm.name })\r\n    }\r\n    const response = await fetch(`http://localhost:5050/record/search`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: body,\r\n\r\n    });\r\n    checkResponseOk(response);\r\n\r\n    let recordsToReturn = await response.json();\r\n    return recordsToReturn;\r\n} \r\n\r\nexport async function getRecordById(table, id) {\r\n\r\n    const response = await fetch(`http://localhost:5050/record/tableid`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ table: table, id: id }),\r\n\r\n    });\r\n\r\n    checkResponseOk(response);\r\n\r\n    let recordsToReturn = await response.json();\r\n    return recordsToReturn;\r\n}\r\n\r\nexport async function editRecord(editedRecord) {\r\n\r\n    const response = await fetch(`http://localhost:5050/record/edit`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(editedRecord),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n    });\r\n\r\n    checkResponseOk(response);\r\n\r\n    let recordsToReturn = await response.json();\r\n    return recordsToReturn;\r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}